"""add bronze and silver layers

Revision ID: 784ad09c9215
Revises: c4a3b2d1e0f9
Create Date: 2025-08-02 10:17:12.174401+00:00

"""

# mypy: ignore-errors

from __future__ import annotations

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "784ad09c9215"
down_revision: Union[str, None] = "c4a3b2d1e0f9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "raw_layer_blocks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("style_id", sa.Integer(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["style_id"],
            ["styles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id", "style_id", "name", name="uq_raw_block_user_style_name"
        ),
    )
    op.create_index(
        op.f("ix_raw_layer_blocks_id"), "raw_layer_blocks", ["id"], unique=False
    )
    op.create_table(
        "raw_layer_playlists",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("raw_layer_block_id", sa.Integer(), nullable=False),
        sa.Column(
            "playlist_type",
            postgresql.ENUM(
                "INBOX_NEW",
                "INBOX_OLD",
                "INBOX_NOT",
                "TRASH",
                "TARGET",
                name="raw_layer_playlist_type_enum",
            ),
            nullable=False,
        ),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.Column("spotify_playlist_id", sa.String(), nullable=False),
        sa.Column("spotify_playlist_url", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["raw_layer_block_id"],
            ["raw_layer_blocks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("spotify_playlist_id"),
    )
    op.create_index(
        op.f("ix_raw_layer_playlists_id"), "raw_layer_playlists", ["id"], unique=False
    )
    op.create_table(
        "raw_layer_block_tracks",
        sa.Column("raw_layer_block_id", sa.Integer(), nullable=False),
        sa.Column("track_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["raw_layer_block_id"],
            ["raw_layer_blocks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["track_id"],
            ["tracks.id"],
        ),
        sa.PrimaryKeyConstraint("raw_layer_block_id", "track_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("raw_layer_block_tracks")
    op.drop_index(op.f("ix_raw_layer_playlists_id"), table_name="raw_layer_playlists")
    op.drop_table("raw_layer_playlists")
    op.drop_index(op.f("ix_raw_layer_blocks_id"), table_name="raw_layer_blocks")
    op.drop_table("raw_layer_blocks")
    # ### end Alembic commands ###
